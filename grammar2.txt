CompilationUnit:
  [PackageDeclaration] [ImportDeclarations] [TypeDeclaration]

PackageDeclaration:
  package QualifiedName ;

QualifiedName:
  Identifier {"." Identifier}

ImportDeclarations:
  ImportDeclaration
  ImportDeclarations ImportDeclaration

ImportDeclaration:
  SingleTypeImportDeclaration
  TypeImportOnDemandDeclaration

SingleTypeImportDeclaration:
  import QualifiedName ";"

TypeImportOnDemandDeclaration:
  import QualifiedName ".*;"

TypeDeclaration:
  ClassDeclaration
  InterfaceDeclaration
  ;

ClassDeclaration:
  {Modifier} class Identifier [Super] [Interfaces] ClassBody

Modifier:
  public
  protected
  abstract
  final
  static
  native

Super:
  extends QualifiedName

Interfaces:
  implements QualifiedName {, QualifiedName}

InterfaceDeclaration:
  {Modifier} interface Identifier [ExtendsInterfaces] InterfaceBody

ExtendsInterfaces:
  extends QualifiedName {, QualifiedName}

ClassBody:
  "{" {ClassBodyDeclaration} "}"

ClassBodyDeclaration:
  ConstructorDeclaration
  FieldDeclaration
  MethodDeclaration
  ;

ConstructorDeclaration:
  {Modifier} ConstructorDeclarator ConstructorBody

ConstructorDeclarator:
  Identifier  "(" [FormalParameterList] ")"

FormalParameterList:
  FormalParamater {, FormalParameter}

FormalParameter:
  Type VariableDeclaratorId

VariableDeclaratorId:
  Identifier [ "[" "]" ]

ConstructorBody:
  "{" [ExplicitConstructorInvocation] {BlockStatement} "}"

FieldDeclaration:
  {Modifier} Type VariableDeclaratorId ["=" Expression] ";"

MethodDeclaration:
  {Modifier} ResultType MethodDeclarator MethodBody

MethodDeclarator:
  Identifier "(" [FormalParameterList] ")

ResultType:
  Type
  void

MethodBody:
  Block
  ";"

InterfaceBody:
  "{" {InterfaceMemberDeclaration} "}"

InterfaceMemberDeclaration:
  AbstractMethodDeclaration

AbstractMethodDeclaration:
  {Modifier} ResultType MethodDeclarator ";"

Block:
  "{" {BlockStatement} "}

BlockStatement:
  LocalVariableDeclarationStatement
  Statement

LocalVariableDeclarationStatement:
  Type VariableDeclaratorId "=" Expression ";"

Statement:
  StatementWithoutTrailingSubstatement
  IfThenStatement
  IfThenElseStatement
  ForStatement

StatementWithoutTrailingSubstatement:
  Block
  ";"
  ExpressionStatement
  ReturnStatement

ExpressionStatement:
  StatementExpression ;

StatementExpression:
  Assignment
  MethodInvocation
  ClassInstanceCreationExpression

Assignment:
    LeftHandSide "=" AssignmentExpression

LeftHandSide:
  QualifiedName
  FieldAccess
  ArrayAccess

FieldAccess:
  Primary . Identifier

Primary:
  PrimaryNoNewArray
  ArrayCreationExpression

PrimaryNoNewArray:
  Literal
  this
  "(" Expression ")"
  ClassInstanceCreationExpression
  FieldAccess
  MethodInvocation
  ArrayAccess

ClassInstanceCreationExpression:
  new QualifiedName "(" [ArgumentList] ")"

ArgumentList:
  Expression {, Expression}

MethodInvocation:
  QualifiedName "(" [ArgumentList] ")"
  Primary "." Identifier "(" [ArgumentList] ")"

ArrayCreationExpression:
  "new" QualifiedName "[" [Expression] "]
  "new" PrimitiveType "[" [Expression] "]

PrimitiveType:
  IntegralType
  boolean

IntegralType:
  byte
  short
  int
  char

ArrayAccess:
  QualifiedName [ Expression ]
  PrimaryNoNewArray [ Expression ]

AssignmentExpression:
  ConditionalExpression
  Assignment

ConditionalExpression:
  ConditionalOrExpression

ConditionalOrExpression:
  ConditionalAndExpression
  ConditionalOrExpression "||" ConditionalAndExpression

ConditionalAndExpression:
  InclusiveOrExpression
  ConditionalAndExpression && InclusiveOrExpression

AndExpression:
  EqualityExpression
  AndExpression & EqualityExpression

ExclusiveOrExpression:
  AndExpression
  ExclusiveOrExpression ^ AndExpression

InclusiveOrExpression:
  ExclusiveOrExpression
  InclusiveOrExpression | ExclusiveOrExpression

EqualityExpression:
  RelationalExpression
  EqualityExpression == RelationalExpression
  EqualityExpression != RelationalExpression

RelationalExpression:
  AdditiveExpression
  RelationalExpression < AdditiveExpression
  RelationalExpression > AdditiveExpression
  RelationalExpression <= AdditiveExpression
  RelationalExpression >= AdditiveExpression
  RelationalExpression instanceof ReferenceType

AdditiveExpression:
  MultiplicativeExpression
  AdditiveExpression + MultiplicativeExpression
  AdditiveExpression - MultiplicativeExpression

MultiplicativeExpression:
  UnaryExpression
  MultiplicativeExpression * UnaryExpression
  MultiplicativeExpression / UnaryExpression
  MultiplicativeExpression % UnaryExpression

UnaryExpression:
  - UnaryExpression
  UnaryExpressionNotPlusMinus

UnaryExpressionNotPlusMinus:
  PostfixExpression
  ~ UnaryExpression # TODO(sjy): do we need this?
  ! UnaryExpression
  CastExpression

CastExpression:
  ( PrimitiveType ) UnaryExpression
  ( ReferenceType ) UnaryExpressionNotPlusMinus

PostfixExpression:
  Primary
  QualifiedName



